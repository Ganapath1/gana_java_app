@Library('my-shared-library') _

pipeline{

  agent any
  
  parameters{
    
    choice(name: 'action', choices: 'create\ndelete', description: 'choose create or destroy' )
    string(name:'aws_account_id', description:'account id of aws', defaultValue:'732860480974')
    string(name:'region', description:'aws region', defaultValue:'us-east-1')
    string(name:'ecrRepoUser', description:'name of the ecr repo', defaultValue:'ganapath1')
    string(name:'cluster', description:'name of the eks cluster', defaultValue:'demo-cluster1')
  }
  environment{
    access_key = credentials('AWS_ACCESS_KEY_ID')
    secret_key = credentials('AWS_SECRET_KEY_ID')
  }
  
  stages{
    
      stage('Git Checkout'){
      when { expression { params.action == 'create'} } 
        
        steps{
          
            gitCheckout(
              branch: "main",
              url: "https://github.com/Ganapath1/gana_java_app.git"
            )
          }
        
      }
//     stage('Unit test maven'){
//     when { expression { params.action == 'create'} }   
//         steps{  
//           script{
//             mvnTest()
//           }
//         }
        
//       }
//     stage('maven integration test'){
//     when { expression { params.action == 'create'} }   
//         steps{  
//           script{
//             mvnIntegrationTest()
//           }
//         }
        
//       }
//     stage('static code analysis: sonarqube'){
//     when { expression { params.action == 'create'} }   
//         steps{  
//           script{
//             def SonarQubecredentialsId = 'sonarqube-api'
//             statiCodeAnalysis(SonarQubecredentialsId)
//           }
//         }
        
//       }
//     stage('quality gate status: sonarqube'){
//     when { expression { params.action == 'create'} }   
//         steps{  
//           script{
//             def SonarQubecredentialsId = 'sonarqube-api'
//             qualityGateStatus(SonarQubecredentialsId)
//           }
//         }
//       }    
//   stage('mvn build'){
//    when { expression { params.action == 'create'} }   
//        steps{  
//          script{
//            mvnBuild()
//          }
//        }
//      }
//      stage('Docker Image Build for ECR'){
//    when { expression { params.action == 'create'} }   
//        steps{  
//          script{
//            dockerBuild("${params.aws_account_id}","${params.region}","${params.ecrRepoUser}")
//         }
//        }
//      }
//      stage('Docker Image scan for ECR'){
//    when { expression { params.action == 'create'} }   
 //       steps{  
 //         script{
 //           trivy("${params.aws_account_id}","${params.region}","${params.ecrRepoUser}")
 //         }
 //       }
 //    }
 //     stage('Docker Image push for ECR'){
 //   when { expression { params.action == 'create'} }   
 //       steps{  
 //         script{
 //           dockerImagePush("${params.aws_account_id}","${params.region}","${params.ecrRepoUser}")
 //         }
 //      }
 //     }
 //     stage('Docker Image cleanup'){
 //   when { expression { params.action == 'create'} }   
 //       steps{  
 //         script{
 //          dockerImageCleanUp("${params.aws_account_id}","${params.region}","${params.ecrRepoUser}")
 //         }
 //       }
 //    }
      stage('create eks cluster using terraform'){
    when { expression { params.action == 'create'} }   
        steps{  
          script{
            dir ('eks_module'){
              sh """
                  terraform init 
                  terraform plan -var 'access_key=$access_key' -var 'secret_key=$secret_key' -var 'region=${params.region}' --var-file=./config/terraform.tfvars
                  terraform apply -var 'access_key=$access_key' -var 'secret_key=$secret_key' -var 'region=${params.region}' --var-file=./config/terraform.tfvars --auto-approve
              """
            }
          }
        }
      }
      stage('connecting to eks'){
    when { expression { params.action == 'create'} }   
        steps{  
          script{
              sh """
                aws configure set aws_access_key_id $access_key
                aws configure set aws_secret_access_key_id $secret_key
                aws configure set region ${params.region}
                aws eks --region ${params.region} update-kubeconfig --name  ${params.cluster}
              """
          }
        }
      }
      stage('deploying to eks'){
    when { expression { params.action == 'create'} }   
        steps{  
          script{
                def apply = false
                try{
                  input message: 'please confirm to deploy on eks', ok: 'Ready to apply the config ?'
                  apply = true
                }catch(err){
                  apply = false
                  currentBuild.result = 'UNSTABLE'
                }
                if (apply) {
                  
                  sh """
                    
                    kubectl apply -f.
                  """
                
                }
          }
        }
      }
   }
}
